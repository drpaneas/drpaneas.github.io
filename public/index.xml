<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>drpaneas</title>
    <link>https://panosgeorgiadis.com/</link>
    <description>Recent content on drpaneas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Mar 2020 03:29:35 +0100</lastBuildDate><atom:link href="https://panosgeorgiadis.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>https://panosgeorgiadis.com/about/</link>
      <pubDate>Mon, 26 Apr 2021 01:29:05 +0200</pubDate>
      
      <guid>https://panosgeorgiadis.com/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Write a Google GCP client with Go</title>
      <link>https://panosgeorgiadis.com/blog/2020/03/15/write-a-google-gcp-client-with-go/</link>
      <pubDate>Sun, 15 Mar 2020 03:29:35 +0100</pubDate>
      
      <guid>https://panosgeorgiadis.com/blog/2020/03/15/write-a-google-gcp-client-with-go/</guid>
      <description>In this article I will explain the mechanics of writing a client for Google GCP, pretty similar like gcloud. The purpose is to not write a full-featured client (that would make no sense, since you can use gcloud already) but to learn the how to communicate with Google&amp;rsquo;s GCP API using Go. Such a pkg can be useful in small projects where you need to talk to Google GCP API, like the OpenShift&amp;rsquo;s GCP Operator.</description>
    </item>
    
    <item>
      <title>How to write your own Kubernetes controller</title>
      <link>https://panosgeorgiadis.com/blog/2020/02/25/how-to-write-your-own-kubernetes-controller/</link>
      <pubDate>Tue, 25 Feb 2020 03:29:35 +0100</pubDate>
      
      <guid>https://panosgeorgiadis.com/blog/2020/02/25/how-to-write-your-own-kubernetes-controller/</guid>
      <description>Write your own controller Before going down the operator framework out there, it is important to understand what is happening under the hood. Then you would be able to appreciate the generated boilerplate code and feel more comfortable to change it.
Prereq This tutorial assumes you have a cluster up and running and you can successfully communicate with it (e.g. kubectl get pods -A should work). If you don&amp;rsquo;t have a cluster, you can setup one locally using CodeReadyContainers(used by the tutorial) or minikube.</description>
    </item>
    
    <item>
      <title>How to run Traefik ingress controller as non-root</title>
      <link>https://panosgeorgiadis.com/blog/2019/01/16/how-to-run-traefik-ingress-controller-as-non-root/</link>
      <pubDate>Wed, 16 Jan 2019 15:39:35 +0200</pubDate>
      
      <guid>https://panosgeorgiadis.com/blog/2019/01/16/how-to-run-traefik-ingress-controller-as-non-root/</guid>
      <description>What is ingress? Ingress are (in a sense) reverse-proxies. But to understand, you need to know first what a proxy is &amp;ndash; and only then will be able to understand the reverse of it.
What is a proxy? For those of you who do not know what a proxy is, the word proxy describes someone/something acting on behalf of someone/something else. In terms on networking, when we are talking about a proxy server we are talking about one server that is acting on behalf of another server.</description>
    </item>
    
    <item>
      <title>Contribute to minikube in a nutshell</title>
      <link>https://panosgeorgiadis.com/blog/2018/09/28/contribute-to-minikube-in-a-nutshell/</link>
      <pubDate>Fri, 28 Sep 2018 16:29:35 +0200</pubDate>
      
      <guid>https://panosgeorgiadis.com/blog/2018/09/28/contribute-to-minikube-in-a-nutshell/</guid>
      <description>It&amp;rsquo;s very easy to contribute to minikube (and other similar packages) when the only thing that is needed is just a version bump in the spec file. You first need to install these:
# zypper in osc spec-cleaner Configure your ~/.oscrc file:
[general] no_verify = 1 extra-pkgs = vim less mc [https://api.opensuse.org] user=pgeorgiadis # CHANGE email=pgeorgiadis@suse.com # CHANGE pass=123456789 # CHANGE trusted_prj=SUSE:SLE-12:GA openSUSE:13.2 openSUSE:Leap:42.3 openSUSE:Factory Base:System Virtualization:containers SUSE:SLE-12-SP3:GA SUSE:SLE-12:SLE-Module-Containers SUSE:Templates:Images:SLE-12-SP3:Base SUSE:SLE-12-SP3:Update openSUSE:Leap:42.</description>
    </item>
    
    <item>
      <title>My personal Go environment setup</title>
      <link>https://panosgeorgiadis.com/blog/2018/09/27/my-personal-go-environment-setup/</link>
      <pubDate>Thu, 27 Sep 2018 17:34:35 +0200</pubDate>
      
      <guid>https://panosgeorgiadis.com/blog/2018/09/27/my-personal-go-environment-setup/</guid>
      <description>How many go version do you have installed? The default upstream location for the binary is: /usr/local/go. But in SUSE it is: /usr/bin/go. This is a symlink created via update-alternatives.
# update-alternatives --list go /usr/lib64/go/1.10/bin/go /usr/lib64/go/1.8/bin/go /usr/lib64/go/1.9/bin/go I want to keep only the 1.10 so I will remove the others:
# zypper rm $(rpm -qf /usr/lib64/go/1.8/bin/go) $(rpm -qf /usr/lib64/go/1.9/bin/go) To verify, try update-alternatives once more. There should be only one version:</description>
    </item>
    
    <item>
      <title>Deploy openSUSE Leap15 VM in Kubernetes using KubeVirt</title>
      <link>https://panosgeorgiadis.com/blog/2018/03/15/deploy-opensuse-leap15-vm-in-kubernetes-using-kubevirt/</link>
      <pubDate>Thu, 15 Mar 2018 20:46:35 +0200</pubDate>
      
      <guid>https://panosgeorgiadis.com/blog/2018/03/15/deploy-opensuse-leap15-vm-in-kubernetes-using-kubevirt/</guid>
      <description>Introduction If you think that Kubernetes is a cluster for managing containers, then you are dead wrong. Kubernetes is a cluster for managing Pods. In most cases, a Pod is considered to be an abstraction of an container object, so Pod talks to Docker and they know each other. What happens though when we introduce a new guy called libvirt and we learn Pod to talk to it? We have KubeVirt.</description>
    </item>
    
    <item>
      <title>How to start with OpenFaaS</title>
      <link>https://panosgeorgiadis.com/blog/2017/11/08/how-to-start-with-openfaas/</link>
      <pubDate>Wed, 08 Nov 2017 22:08:35 +0200</pubDate>
      
      <guid>https://panosgeorgiadis.com/blog/2017/11/08/how-to-start-with-openfaas/</guid>
      <description>Introduction Before we get into what is serverless or openfaas, I would like to talk about the concept behind this. So, before going into the details, I want to give you the big picture of this new way of developing applications and how the users are supposed to use them.
Containers are now more efficient than ever So letâ€™s go back in time, when computers were enormous things and filled complete rooms.</description>
    </item>
    
    <item>
      <title>Kubernetes Basics</title>
      <link>https://panosgeorgiadis.com/blog/2017/05/08/kubernetes-basics/</link>
      <pubDate>Mon, 08 May 2017 22:08:35 +0200</pubDate>
      
      <guid>https://panosgeorgiadis.com/blog/2017/05/08/kubernetes-basics/</guid>
      <description>What is Kubernetes By definition, Kubernetes is an open source container cluster manager, and it is usually referred to by its internal name withing Google development - k8s. Google donated it to the open source world as a &amp;ldquo;seed technology&amp;rdquo; at 2015, to the newly formed CNCF - Cloud Native Computing Foundation, which established partnership with The Linux Foundation. The primary goal of Kubernetes is to provide a platform for automating deployment, scaling and operations of application containers across a cluster of hosts.</description>
    </item>
    
    <item>
      <title>new_site</title>
      <link>https://panosgeorgiadis.com/blog/2017/05/08/new_site/</link>
      <pubDate>Mon, 08 May 2017 22:08:35 +0200</pubDate>
      
      <guid>https://panosgeorgiadis.com/blog/2017/05/08/new_site/</guid>
      <description>Hugo is a static site engine written in Go.
It makes use of a variety of open source projects including:
 Cobra Viper J Walter Weatherman Cast  Learn more and contribute on GitHub.
Setup Some fun facts about Hugo:
 Built in Go Loosely inspired by Jekyll Primarily developed by spf13 on the train while commuting to and from Manhattan. Coded in Vim using spf13-vim  Have questions or suggestions?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://panosgeorgiadis.com/blog/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://panosgeorgiadis.com/blog/1/01/01/</guid>
      <description>When we are writing unit tests, we want to make sure that our unit works as expected. Simple put, for a given input it returns an expected output. Most of the tutorials are showing very simple examples (for a good reason) where there is a function that receives two integers and returns the sum of them. In that case, the programmer writes a unit test by adding two hardcoded examples, one that passes and one that is expected to fail (to test the error logging mechanism, if it exists).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://panosgeorgiadis.com/blog/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://panosgeorgiadis.com/blog/1/01/01/</guid>
      <description>Prometheus is a monitoring system It does several things for metrics:
https://www.youtube.com/watch?v=sHKWD8XnmmY
 collects metrics storing metrics querying metrics alerting on metrics  The origin has been developed by SunClound 2012. At 2015 it has been become Prometheus.
If we compare Prometheus to more traditional systems like Nagios or Zabbix, the rely on external checks for the applications they want to monitor. Prometheus expects that the applications we want to monitor are observable from the outside instead of being black boxes, they need to expose their state or something that will tell us how they behave.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://panosgeorgiadis.com/blog/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://panosgeorgiadis.com/blog/1/01/01/</guid>
      <description>A valid Telemeter v2 client must package the time series it wishes to send into a Prometheus WriteRequest. This WriteRequest must use protocol buffer encoding, be compressed using Snappy, and sent via an HTTP POST request. In order for the request to be accepted, the client must include a bearer token in the Authorization HTTP header consisting of a base64 encoded JSON object with two fields:
 cluster_id: a string holding the clusterâ€™s unique ID; and authorization_token: a string with the clusterâ€™s pull secret auth token  -endpoint-read string : the endpoint to which to make query requests.</description>
    </item>
    
  </channel>
</rss>
